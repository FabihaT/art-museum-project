import mysql.connector

def admin_interface(cur, cnx):
    while True:
        print("\Current Database tables:")
        print("1 - Paintings")
        print("2 - Sculptures")
        print("3 - Other Pieces")
        print("4 - Artists")
        print("5 - Exhibitions")
        print("6 - Art Objects")
        print("7 - Collections")
        print("8 - Permanent Collections")
        print("9 - Borrowed Items")
        print("10 - Kept In")
        table_selection = input("Select a table to modify (press 0 to exit): ")

        if table_selection == '0':
            return
        elif table_selection in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']:
            display_table_data(cur, table_selection)
            modify_table_data(cur, cnx, table_selection)
        else:
            print("Invalid selection. Please try again.")

def display_table_data(cur, selection):
    if selection == '1':
        paintings_info(cur)
    elif selection == '2':
        sculptures_info(cur)
    elif selection == '3':
        other_info(cur)
    elif selection == '4':
        artist_info(cur)
    elif selection == '5':
        exhibition_info(cur)
    elif selection == '6':
        artobj_info(cur)
    elif selection == '7':
        collections_info(cur)
    elif selection == '8':
        permanent_collection_info(cur)
    elif selection == '9':
        borrowed_info(cur)
    elif selection == '10':
        kept_in_info(cur)

def modify_table_data(cur, cnx, table_selection):
    while True:
        print("\nChoose an operation for this table:")
        print("1 - Insert data")
        print("2 - Update data")
        print("3 - Delete data")
        print("0 - Go Back")
        operation = input("Select the operation: ")

        if operation == '1':
            insert(cur, cnx, table_selection)
        elif operation == '2':
            update(cur, cnx, table_selection)
        elif operation == '3':
            delete(cur, cnx, table_selection)
        elif operation == '0':
            return
        else:
            print("Invalid operation. Please try again.")

def get_table_name(table_selection):
    table_map = {
        '1': 'painting',
        '2': 'sculpture',
        '3': 'other',
        '4': 'artist',
        '5': 'exhibitions',
        '6': 'artobj',
        '7': 'collections',
        '8': 'permanent_collection',
        '9': 'borrowed',
        '10': 'kept_in'
    }
    return table_map.get(table_selection)

def insert(cur, cnx, table_selection):
    table_name = get_table_name(table_selection)
    if table_name:
        cur.execute(f"SELECT column_name, data_type FROM information_schema.columns WHERE table_name='{table_name}'")
        columns = []
        input_val = []
        values = []
        for (column_name, data_type,) in cur:
            columns.append(column_name)
            input_val.append(data_type)

        for i in range(len(columns)):
            user_input = input(f"\nEnter a value for {columns[i]} (press ENTER if none): ")
            if user_input == '':
                values.append('NULL')
            elif input_val[i] == 'int':
                values.append(user_input)
            else:
                values.append(f"'{user_input}'")

        values_string = ', '.join(values)

        try:
            cur.execute(f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({values_string})")
            cnx.commit()  # Don't forget to commit your changes
            print("Insert operation was successful.")
        except mysql.connector.errors.IntegrityError as e:
            print(f"Insert unsuccessful due to foreign key constraint. Error: {e}")
        except mysql.connector.errors.ProgrammingError as e:
            print(f"Invalid syntax. Insert was unsuccessful. Error: {e}")
    else:
        print("Invalid table selection.")

def update(cur, cnx, table_selection):
    table_name = get_table_name(table_selection)
    if table_name:
        update_set = input("Enter the attributes and their values: ")
        update_where = input("Enter the tuples you would like to modify: ")
        try:
            cur.execute(f"UPDATE {table_name} SET {update_set} WHERE {update_where}")
            cnx.commit()
            print('Your table has been updated successfully.')
        except mysql.connector.errors.ProgrammingError:
            print("Invalid syntax. Update was unsuccessful.")
        except mysql.connector.errors.IntegrityError:
            print("Update unsuccessful due to foreign key constraint.")
    else:
        print("Invalid table selection.")

def delete(cur, cnx, table_selection):
    table_name = get_table_name(table_selection)
    if table_name:
        attribute = input("Enter the attribute to delete: ")
        value = input("Enter the value of your selected attribute to delete: ")
        try:
            cur.execute(f"DELETE FROM {table_name} WHERE {attribute}='{value}'")
            cnx.commit()
            print("Delete of tuple was successful.")
        except mysql.connector.errors.ProgrammingError:
            print("Invalid syntax. Delete was unsuccessful.")
        except mysql.connector.errors.IntegrityError:
            print("Delete unsuccessful due to foreign key constraint.")
    else:
        print("Invalid table selection.")

def guest_interface():
    print("\nThis is a list of what you can browse.")
    print("1 - Art Pieces")
    print("2 - Artists")
    print("3 - Exhibitions")
    selection = int(input("Select what you are looking for (press 0 to exit): "))

    while(selection):
        if selection == 1:
            subselection = input("Enter 1 for Sculptures, 2 for Paintings, and 3 for Other Pieces: ")
            if subselection == '1':
                sculptures_info(cur)
            elif subselection == '2':
                paintings_info(cur)
            else:
                other_info(cur)
        elif selection == 2:
            artist_info(cur)
        elif selection == 3:
            exhibition_info(cur) 
        else:
            break  
        selection = int(input("\nEnter another selection to browse (press 0 to exit): "))

    if selection == 0:
        return

def exhibition_info(cur):
    instruction = 'select Start_date, End_date, Art_Desc, Cost, Status, Title from exhibitions join permanent_collection join artobj where exhibitions.ExID = permanent_collection.CollectID and exhibitions.ExID = artobj.ArtID'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<20s}".format(columns[i]), end = '')
    print()
    print(25*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<20s}".format(str(val)), end = '')
        print()

def collections_info(cur):
    instruction = 'SELECT Name, CType, Description, Address, Phone, Contact_person FROM collections'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    for col in columns:
        print("{:<20s}".format(col), end='')
    print("\n" + '-' * 20 * len(columns))
    for row in search_result:
        for val in row:
            print("{:<20s}".format(str(val)), end='')
        print()

def permanent_collection_info(cur):
    instruction = 'SELECT CollectID, Date_acq, Status, Cost FROM permanent_collection'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    for col in columns:
        print("{:<30s}".format(col), end='')
    print("\n" + '-' * 30 * len(columns))
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end='')
        print()

def borrowed_info(cur):
    instruction = 'SELECT BorrowID, Collection, date_borrowed, date_return FROM borrowed'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    for col in columns:
        print("{:<30s}".format(col), end='')
    print("\n" + '-' * 30 * len(columns))
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end='')
        print()

def kept_in_info(cur):
    instruction = 'SELECT ArtID, Collect_name FROM kept_in'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    for col in columns:
        print("{:<30s}".format(col), end='')
    print("\n" + '-' * 30 * len(columns))
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end='')
        print()

def artist_info(cur):
    instruction = ''
    search = input("Enter the Artist name you are looking for (press ENTER to view all): ") or None
    if search == None:
        instruction = 'select Name, Birthdate, Date_died, Country_of_origin, Artist_Desc from artist'
        cur.execute(instruction)
    else:
        instruction = "select Name, Birthdate, Date_died, Country_of_origin, Artist_Desc from artist where Name = %(Name)s"
        cur.execute(instruction, {'Name':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<30s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end = '')
        print()

def artobj_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None
    if search is None:
        instruction = 'SELECT ArtID, Art_Desc, Title, Artist, Art_yr, Origin, Epoch FROM artobj'
        cur.execute(instruction)
    else:
        instruction = "SELECT ArtID, Art_Desc, Title, Artist, Art_yr, Origin, Epoch FROM artobj WHERE ArtID = %(artid)s"
        cur.execute(instruction, {'artid': search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    for col in columns:
        print("{:<20s}".format(col), end='')
    print("\n" + '-' * 20 * len(columns))
    for row in search_result:
        for val in row:
            print("{:<20s}".format(str(val)), end='')
        print()

def other_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None
    if search == None:
            instruction = 'select objType, Style, Art_yr, Artist, Title from artobj join other where artobj.ArtID = other.oID'
            cur.execute(instruction)
    else:
        instruction = "select objType, Style, Art_yr, Artist, Title from artobj join other where ArtID = %(artid)s and artobj.ArtID = other.oID"
        cur.execute(instruction, {'artid':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<30s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end = '')
        print()

def paintings_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None

    if search == None:
        instruction = 'select Paint_type, Draw_on, Style, Artist, Title from artobj join painting where artobj.ArtID = painting.pID'
        cur.execute(instruction)
    else:
        instruction = "select Paint_type, Draw_on, Style, Artist, Title from artobj join painting where ArtID = %(artid)s and artobj.ArtID = painting.pID"
        cur.execute(instruction, {'artid':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<25s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<25s}".format(str(val)), end = '')
        print()

def sculptures_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None
    if search == None:
        instruction = 'select Material, Height, Weight, Style, Artist, Title from artobj join sculpture where artobj.ArtID = sculpture.sID'
        cur.execute(instruction)
    else:
        instruction = "select Material, Height, Weight, Style, Artist, Title from artobj join sculpture where ArtID = %(artid)s and artobj.ArtID = sculpture.sID"
        cur.execute(instruction, {'artid':search})
    
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<25s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<25s}".format(str(val)), end = '')
        print()

if __name__ == "__main__":
    print("Welcome to the Art Database!")
    print("1 - DB Admin")
    print("2 - Browse as Guest")

    while True:
        selection = input("Please select your role from the above list: ")

        if selection == '1':
            username = input("Username: ")
            passcode = input("Password: ")
            break
        elif selection == '2':
            username = "guest"
            passcode = None 
            break
        else:
            print("Invalid Selection. Please try again.")

    cnx = mysql.connector.connect(
        host="localhost",
        port=3306,
        user=username,
        password=passcode,
        database="artdatabase"
    )

    try:
        cur = cnx.cursor(buffered=True)
        cur.execute("use artdatabase")

        if selection == '1':
            admin_interface(cur, cnx) 
        elif selection == '2':
            guest_interface() 

    except mysql.connector.errors.DatabaseError as e:
        print(f"Database connection error: {e}")
    
    finally:
        cnx.close()
        print("\nThank you for using this application.")