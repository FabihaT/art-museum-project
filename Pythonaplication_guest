import mysql.connector

def guest_interface():
    print("\nThis is a list of what you can browse.")
    print("1 - Art Pieces")
    print("2 - Artists")
    print("3 - Exhibitions")
    selection = int(input("Select what you are looking for (press 0 to exit): "))

    while(selection):
        if selection == 1:
            subselection = input("Enter 1 for Sculptures, 2 for Paintings, and 3 for Other Pieces: ")
            if subselection == '1':
                sculptures_info(cur)
            elif subselection == '2':
                paintings_info(cur)
            else:
                other_info(cur)
        elif selection == 2:
            artist_info(cur)
        elif selection == 3:
            exhibition_info(cur) 
        else:
            break  
        selection = int(input("\nEnter another selection to browse (press 0 to exit): "))

    if selection == 0:
        return

def exhibition_info(cur):
    instruction = 'select Start_date, End_date, Art_Desc, Cost, Status, Title from exhibitions join permanent_collection join artobj where exhibitions.ItemID = permanent_collection.CollectID and exhibitions.ItemID = artobj.ArtID'
    cur.execute(instruction)
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<20s}".format(columns[i]), end = '')
    print()
    print(25*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<20s}".format(str(val)), end = '')
        print()

def artist_info(cur):
    instruction = ''
    search = input("Enter the Artist name you are looking for (press ENTER to view all): ") or None
    if search == None:
        instruction = 'select Name, Birthdate, Date_died, Country_of_origin, Artist_Desc from artist'
        cur.execute(instruction)
    else:
        instruction = "select Name, Birthdate, Date_died, Country_of_origin, Artist_Desc from artist where Name = %(Name)s"
        cur.execute(instruction, {'Name':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<30s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end = '')
        print()

def other_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None
    if search == None:
            instruction = 'select objType, Style, Art_yr, Artist, Title from artobj join other where artobj.ArtID = other.oID'
            cur.execute(instruction)
    else:
        instruction = "select objType, Style, Art_yr, Artist, Title from artobj join other where ArtID = %(artid)s and artobj.ArtID = other.oID"
        cur.execute(instruction, {'artid':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<30s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<30s}".format(str(val)), end = '')
        print()

def paintings_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None

    if search == None:
        instruction = 'select Paint_type, Draw_on, Style, Artist, Title from artobj join painting where artobj.ArtID = painting.pID'
        cur.execute(instruction)
    else:
        instruction = "select Paint_type, Draw_on, Style, Artist, Title from artobj join painting where ArtID = %(artid)s and artobj.ArtID = painting.pID"
        cur.execute(instruction, {'artid':search})

    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<25s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<25s}".format(str(val)), end = '')
        print()

def sculptures_info(cur):
    instruction = ''
    search = input("Enter the ArtID you are looking for (press ENTER to view all): ") or None
    if search == None:
        instruction = 'select Material, Height, Weight, Style, Artist, Title from artobj join sculpture where artobj.ArtID = sculpture.sID'
        cur.execute(instruction)
    else:
        instruction = "select Material, Height, Weight, Style, Artist, Title from artobj join sculpture where ArtID = %(artid)s and artobj.ArtID = sculpture.sID"
        cur.execute(instruction, {'artid':search})
    
    columns = cur.column_names
    search_result = cur.fetchall()
    print("\nSearch found ", len(search_result), " entries: \n")
    header_size = len(columns)
    for i in range(header_size):
        print("{:<25s}".format(columns[i]), end = '')
    print()
    print(30*header_size*'-')
    for row in search_result:
        for val in row:
            print("{:<25s}".format(str(val)), end = '')
        print()

if __name__ == "__main__":
    print("Welcome to the Art Database!")
    print("1 - DB Admin")
    print("2 - Data Entry")
    print("3 - Browse as Guest")

    selection = input("Please select your role from the above list: ")

    if selection in ['1','2']:
        username = input("Username: ")
        passcode = input("Password: ")
    else:
        username = "guest"
        passcode = None

    cnx = mysql.connector.connect(
        host = "127.0.0.1",
        port = 3306,
        user = username,
        password = passcode)
    
    cur = cnx.cursor(buffered = True)
    cur.execute("use artdatabase")

    #if selection == '1':
        #admin_interface()
    #elif selection == '2':
        #data_entry()
    if selection == '3':
        guest_interface()
    
    print("\nThank you for using this application.")
    cnx.close()
